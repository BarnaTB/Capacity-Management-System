version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    restart: always
    ports:
      - 8000:8000
    volumes:
      - ./:/usr/src/app
    command: >
      bash -c "python manage.py wait_for_db && python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn acms.wsgi:application -w 2 -b 0.0.0.0:8000 --reload"
    env_file:
      - .env
    environment:
      LAUNCH_TYPE: webserver
    links:
      - db
      - rabbitmq
    depends_on:
      - db
  db:
    image: "postgres:11"
    restart: on-failure
    volumes:
      - postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  celery:
    restart: on-failure
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    volumes:
      - ./:/usr/src/app
    env_file:
      - .env
    environment:
      LAUNCH_TYPE: worker
    command: >
        bash -c "celery -A acms worker -E -l INFO --concurrency=1 &
          celery -A acms worker -E -l INFO -n worker.low -Q low --concurrency=1 &
          celery -A acms worker -E -l INFO -n worker.high -Q high --concurrency=1"
    depends_on:
      - db
      - rabbitmq
      - app
volumes:
  postgres:
  rabbitmq_data:
  static_volume:
